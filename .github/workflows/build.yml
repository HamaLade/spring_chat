name: Build and Push to ECR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2  # AWS 리전
  ECR_REPOSITORY_APP: spring-chat-app-repository  # app 모듈용 ECR 리포지토리 이름
  ECR_REPOSITORY_WEBSOCKET: spring-chat-websocket-repository  # websocket 모듈용 ECR 리포지토리 이름
  ECS_SERVICE: app-websocket-kafka-redis-service  # ECS 서비스 이름
  ECS_CLUSTER: spring-chat-cluster  # ECS 클러스터 이름

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.filter.outputs.app }}
      websocket: ${{ steps.filter.outputs.websocket }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app:
              - 'app/**'
            websocket:
              - 'websocket/**'

  build_and_push_app:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.app == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build app module with prod profile
        run: |
          chmod +x ./gradlew
          cd app
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION }}" | base64 --decode > src/main/resources/application-prod.yml
          ../gradlew build -Pspring.profiles.active=prod

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd app
          docker buildx create --use
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG --build-arg SPRING_PROFILES_ACTIVE=prod --push .
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:latest --build-arg SPRING_PROFILES_ACTIVE=prod --push .

  build_and_push_websocket:
    needs: check_changes
    if: ${{ needs.check_changes.outputs.websocket == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build websocket module
        run: |
          chmod +x ./gradlew
          cd websocket
          ../gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd websocket
          docker buildx create --use
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBSOCKET:$IMAGE_TAG --push .
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBSOCKET:latest --push .

  deploy_to_ecs:
    needs: [build_and_push_app, build_and_push_websocket]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment

#          자동 배포를 위한 ECS 태스크 정의 업데이트 및 배포 (의도하지 않은 배포가 발생할 수 있으므로 주석 처리)
#  deploy_to_ecs:
#    needs: [ build_and_push_app, build_and_push_websocket ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Download task definition
#        run: |
#          aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE }} \
#          --query taskDefinition > task-definition.json
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: app
#          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_APP }}:${{ github.sha }}
#
#      - name: Update websocket container in task definition
#        id: task-def-websocket
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          container-name: websocket
#          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_WEBSOCKET }}:${{ github.sha }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def-websocket.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true